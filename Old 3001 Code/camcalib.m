% Auto-generated by cameraCalibrator app on 22-Feb-2023
%-------------------------------------------------------


% Define images to process
imageFileNames = {'./Image34.png',...
    './Image35.png',...
    './Image36.png',...
    './Image37.png',...
    './Image38.png',...
    './Image39.png',...
    './Image40.png',...
    './Image41.png',...
    './Image42.png',...
    './Image43.png',...
    './Image44.png',...
    './Image46.png',...
    './Image47.png',...
    './Image48.png',...
    './Image49.png',...
    './Image50.png',...
    './Image51.png',...
    './Image53.png',...
    './Image54.png',...
    './Image56.png',...
    './Image57.png',...
    './Image58.png',...
    './Image59.png',...
    './Image60.png',...
    './Image61.png',...
    './Image62.png',...
    './Image63.png',...
    './Image65.png',...
    './Image66.png',...
    './Image67.png',...
    './Image68.png',...
    './Image69.png',...
    './Image70.png',...
    './Image71.png',...
    './Image72.png',...
    './Image73.png',...
    './Image74.png',...
    './Image75.png',...
    './Image76.png',...
    './Image77.png',...
    './Image78.png',...
    './Image79.png',...
    './Image80.png',...
    './Image81.png',...
    './Image82.png',...
    './Image83.png',...
    './Image84.png',...
    './Image85.png',...
    './Image86.png',...
    './Image87.png',...
    './Image88.png',...
    './Image89.png',...
    './Image90.png',...
    './Image91.png',...
    './Image92.png',...
    './Image93.png',...
    };
% Detect calibration pattern in images
detector = vision.calibration.monocular.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates for the planar pattern keypoints
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Calibrate the camera using fisheye parameters
[cameraParams, imagesUsed, estimationErrors] = estimateFisheyeParameters(imagePoints, worldPoints, ...
    [mrows, ncols], ...
    'EstimateAlignment', false, ...
    'WorldUnits', 'millimeters');

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortFisheyeImage(originalImage, cameraParams.Intrinsics);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
